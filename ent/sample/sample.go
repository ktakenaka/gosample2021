// Code generated by entc, DO NOT EDIT.

package sample

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the sample type in the database.
	Label = "sample"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOfficeID holds the string denoting the office_id field in the database.
	FieldOfficeID = "office_id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldMemo holds the string denoting the memo field in the database.
	FieldMemo = "memo"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the sample in the database.
	Table = "samples"
)

// Columns holds all SQL columns for sample fields.
var Columns = []string{
	FieldID,
	FieldOfficeID,
	FieldCode,
	FieldSize,
	FieldAmount,
	FieldMemo,
	FieldURL,
	FieldActive,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "samples"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"office_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// Size defines the type for the "size" enum field.
type Size string

// Size values.
const (
	SizeSmall  Size = "small"
	SizeMedium Size = "medium"
	SizeBig    Size = "big"
)

func (s Size) String() string {
	return string(s)
}

// SizeValidator is a validator for the "size" field enum values. It is called by the builders before save.
func SizeValidator(s Size) error {
	switch s {
	case SizeSmall, SizeMedium, SizeBig:
		return nil
	default:
		return fmt.Errorf("sample: invalid enum value for size field: %q", s)
	}
}
