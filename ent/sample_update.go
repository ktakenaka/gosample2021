// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"net/url"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ktakenaka/gosample2021/ent/predicate"
	"github.com/ktakenaka/gosample2021/ent/sample"
)

// SampleUpdate is the builder for updating Sample entities.
type SampleUpdate struct {
	config
	hooks    []Hook
	mutation *SampleMutation
}

// Where appends a list predicates to the SampleUpdate builder.
func (su *SampleUpdate) Where(ps ...predicate.Sample) *SampleUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetOfficeID sets the "office_id" field.
func (su *SampleUpdate) SetOfficeID(i int) *SampleUpdate {
	su.mutation.ResetOfficeID()
	su.mutation.SetOfficeID(i)
	return su
}

// AddOfficeID adds i to the "office_id" field.
func (su *SampleUpdate) AddOfficeID(i int) *SampleUpdate {
	su.mutation.AddOfficeID(i)
	return su
}

// SetCode sets the "code" field.
func (su *SampleUpdate) SetCode(s string) *SampleUpdate {
	su.mutation.SetCode(s)
	return su
}

// SetSize sets the "size" field.
func (su *SampleUpdate) SetSize(s sample.Size) *SampleUpdate {
	su.mutation.SetSize(s)
	return su
}

// SetAmount sets the "amount" field.
func (su *SampleUpdate) SetAmount(f float64) *SampleUpdate {
	su.mutation.ResetAmount()
	su.mutation.SetAmount(f)
	return su
}

// AddAmount adds f to the "amount" field.
func (su *SampleUpdate) AddAmount(f float64) *SampleUpdate {
	su.mutation.AddAmount(f)
	return su
}

// SetMemo sets the "memo" field.
func (su *SampleUpdate) SetMemo(s string) *SampleUpdate {
	su.mutation.SetMemo(s)
	return su
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (su *SampleUpdate) SetNillableMemo(s *string) *SampleUpdate {
	if s != nil {
		su.SetMemo(*s)
	}
	return su
}

// ClearMemo clears the value of the "memo" field.
func (su *SampleUpdate) ClearMemo() *SampleUpdate {
	su.mutation.ClearMemo()
	return su
}

// SetURL sets the "url" field.
func (su *SampleUpdate) SetURL(u *url.URL) *SampleUpdate {
	su.mutation.SetURL(u)
	return su
}

// ClearURL clears the value of the "url" field.
func (su *SampleUpdate) ClearURL() *SampleUpdate {
	su.mutation.ClearURL()
	return su
}

// SetActive sets the "active" field.
func (su *SampleUpdate) SetActive(b bool) *SampleUpdate {
	su.mutation.SetActive(b)
	return su
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (su *SampleUpdate) SetNillableActive(b *bool) *SampleUpdate {
	if b != nil {
		su.SetActive(*b)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SampleUpdate) SetUpdatedAt(t time.Time) *SampleUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// Mutation returns the SampleMutation object of the builder.
func (su *SampleUpdate) Mutation() *SampleMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SampleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	su.defaults()
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SampleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SampleUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SampleUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SampleUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SampleUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := sample.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SampleUpdate) check() error {
	if v, ok := su.mutation.Code(); ok {
		if err := sample.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf("ent: validator failed for field \"code\": %w", err)}
		}
	}
	if v, ok := su.mutation.Size(); ok {
		if err := sample.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf("ent: validator failed for field \"size\": %w", err)}
		}
	}
	return nil
}

func (su *SampleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sample.Table,
			Columns: sample.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: sample.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.OfficeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sample.FieldOfficeID,
		})
	}
	if value, ok := su.mutation.AddedOfficeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sample.FieldOfficeID,
		})
	}
	if value, ok := su.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sample.FieldCode,
		})
	}
	if value, ok := su.mutation.Size(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: sample.FieldSize,
		})
	}
	if value, ok := su.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: sample.FieldAmount,
		})
	}
	if value, ok := su.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: sample.FieldAmount,
		})
	}
	if value, ok := su.mutation.Memo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sample.FieldMemo,
		})
	}
	if su.mutation.MemoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sample.FieldMemo,
		})
	}
	if value, ok := su.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: sample.FieldURL,
		})
	}
	if su.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: sample.FieldURL,
		})
	}
	if value, ok := su.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sample.FieldActive,
		})
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sample.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sample.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SampleUpdateOne is the builder for updating a single Sample entity.
type SampleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SampleMutation
}

// SetOfficeID sets the "office_id" field.
func (suo *SampleUpdateOne) SetOfficeID(i int) *SampleUpdateOne {
	suo.mutation.ResetOfficeID()
	suo.mutation.SetOfficeID(i)
	return suo
}

// AddOfficeID adds i to the "office_id" field.
func (suo *SampleUpdateOne) AddOfficeID(i int) *SampleUpdateOne {
	suo.mutation.AddOfficeID(i)
	return suo
}

// SetCode sets the "code" field.
func (suo *SampleUpdateOne) SetCode(s string) *SampleUpdateOne {
	suo.mutation.SetCode(s)
	return suo
}

// SetSize sets the "size" field.
func (suo *SampleUpdateOne) SetSize(s sample.Size) *SampleUpdateOne {
	suo.mutation.SetSize(s)
	return suo
}

// SetAmount sets the "amount" field.
func (suo *SampleUpdateOne) SetAmount(f float64) *SampleUpdateOne {
	suo.mutation.ResetAmount()
	suo.mutation.SetAmount(f)
	return suo
}

// AddAmount adds f to the "amount" field.
func (suo *SampleUpdateOne) AddAmount(f float64) *SampleUpdateOne {
	suo.mutation.AddAmount(f)
	return suo
}

// SetMemo sets the "memo" field.
func (suo *SampleUpdateOne) SetMemo(s string) *SampleUpdateOne {
	suo.mutation.SetMemo(s)
	return suo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableMemo(s *string) *SampleUpdateOne {
	if s != nil {
		suo.SetMemo(*s)
	}
	return suo
}

// ClearMemo clears the value of the "memo" field.
func (suo *SampleUpdateOne) ClearMemo() *SampleUpdateOne {
	suo.mutation.ClearMemo()
	return suo
}

// SetURL sets the "url" field.
func (suo *SampleUpdateOne) SetURL(u *url.URL) *SampleUpdateOne {
	suo.mutation.SetURL(u)
	return suo
}

// ClearURL clears the value of the "url" field.
func (suo *SampleUpdateOne) ClearURL() *SampleUpdateOne {
	suo.mutation.ClearURL()
	return suo
}

// SetActive sets the "active" field.
func (suo *SampleUpdateOne) SetActive(b bool) *SampleUpdateOne {
	suo.mutation.SetActive(b)
	return suo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableActive(b *bool) *SampleUpdateOne {
	if b != nil {
		suo.SetActive(*b)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SampleUpdateOne) SetUpdatedAt(t time.Time) *SampleUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// Mutation returns the SampleMutation object of the builder.
func (suo *SampleUpdateOne) Mutation() *SampleMutation {
	return suo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SampleUpdateOne) Select(field string, fields ...string) *SampleUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Sample entity.
func (suo *SampleUpdateOne) Save(ctx context.Context) (*Sample, error) {
	var (
		err  error
		node *Sample
	)
	suo.defaults()
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SampleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SampleUpdateOne) SaveX(ctx context.Context) *Sample {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SampleUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SampleUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SampleUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := sample.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SampleUpdateOne) check() error {
	if v, ok := suo.mutation.Code(); ok {
		if err := sample.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf("ent: validator failed for field \"code\": %w", err)}
		}
	}
	if v, ok := suo.mutation.Size(); ok {
		if err := sample.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf("ent: validator failed for field \"size\": %w", err)}
		}
	}
	return nil
}

func (suo *SampleUpdateOne) sqlSave(ctx context.Context) (_node *Sample, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sample.Table,
			Columns: sample.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: sample.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Sample.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sample.FieldID)
		for _, f := range fields {
			if !sample.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sample.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.OfficeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sample.FieldOfficeID,
		})
	}
	if value, ok := suo.mutation.AddedOfficeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sample.FieldOfficeID,
		})
	}
	if value, ok := suo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sample.FieldCode,
		})
	}
	if value, ok := suo.mutation.Size(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: sample.FieldSize,
		})
	}
	if value, ok := suo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: sample.FieldAmount,
		})
	}
	if value, ok := suo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: sample.FieldAmount,
		})
	}
	if value, ok := suo.mutation.Memo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sample.FieldMemo,
		})
	}
	if suo.mutation.MemoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sample.FieldMemo,
		})
	}
	if value, ok := suo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: sample.FieldURL,
		})
	}
	if suo.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: sample.FieldURL,
		})
	}
	if value, ok := suo.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sample.FieldActive,
		})
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sample.FieldUpdatedAt,
		})
	}
	_node = &Sample{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sample.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
